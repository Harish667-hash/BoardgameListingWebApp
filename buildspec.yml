---
version: 0.2
phases:
  install:
    runtime-versions:
      java: corretto17
    commands:
      - echo Installing Maven and Docker Engine...
      - apt-get update
      - apt-get install -y software-properties-common
      - add-apt-repository universe
      - apt-get update
      - apt-get install -y maven
      - apt-get install -y apt-transport-https ca-certificates curl gnupg-agent software-properties-common
      - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
      - add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
      - apt-get update 
      - apt-get install -y curl unzip jq
      - apt-get install -y docker-ce docker-ce-cli containerd.io
      - curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.24.11/2023-03-17/bin/linux/amd64/kubectl
      - chmod +x ./kubectl
      - sudo cp ./kubectl /usr/local/bin
      - export PATH=/usr/local/bin:$PATH
       # Install AWS CLI
      - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
      - unzip awscliv2.zip
      - sudo ./aws/install --update
      - aws --version
  pre_build:
    commands:
      - echo Preparing for build...
      - java -version
      - mvn -version
      - echo "Update Image tag in kubernetes manifest"
      - sed -i 's@CONTAINER_IMAGE@'"$REPOSITORY_URI:latest"'@' deployment.yml
      - echo "Checking AWS CLI Version..."
      - aws --version
  build:
    commands:
      - echo Building the Java application...
      - mvn clean package
      - echo "Generating build artifact..."
      - mkdir -p build-artifacts
      - cp target/*.jar build-artifacts/
      - echo Building Docker image...
      - docker build -t harish552/javaapp:latest .
  post_build:
    commands:
      - set -x
      - echo Running post-build steps...
      #- echo "$DOCKER_HUB_PASSWORD" | docker login -u "$DOCKER_HUB_USERNAME" --password-stdin
     # - echo "Pushing Docker image $REPOSITORY_URL:latest"
     # - docker push harish552/javaapp:latest 
      - echo "Pushing completed successfully"
      # Get AWS Credential using STS Assume Role for kubectl
      - echo "Setting Environment Variables related to AWS CLI for Kube Config Setup"          
      - CREDENTIALS=$(aws sts assume-role --role-arn $EKS_ROLE_ARN --role-session-name eks-codebuild --duration-seconds 900)
      - export AWS_ACCESS_KEY_ID="$(echo ${CREDENTIALS} | jq -r '.Credentials.AccessKeyId')"
      - export AWS_SECRET_ACCESS_KEY="$(echo ${CREDENTIALS} | jq -r '.Credentials.SecretAccessKey')"
      - export AWS_SESSION_TOKEN="$(echo ${CREDENTIALS} | jq -r '.Credentials.SessionToken')"
      - export AWS_EXPIRATION=$(echo ${CREDENTIALS} | jq -r '.Credentials.Expiration')
      # Updating kubectl with your EKS Cluster              
      - echo "Update Kube Config configuration"      
      - aws eks update-kubeconfig --name $EKS_CLUSTERNAME
      # Show time, applying manifests changes using kubectl
      - echo "Apply changes to kube manifests"            
      - kubectl apply -f deployment.yml
      - echo "All done!!!! Kubernetes changes applied"           
      # Create Artifacts which we can use if we want to continue our pipeline for other stages
      - printf '[{"name":"deployment.yaml","imageUri":"%s"}]' $REPOSITORY_URI:$TAG > build.json   
