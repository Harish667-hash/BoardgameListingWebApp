pipeline {
    agent any

    tools {
        jdk 'java17'
        maven 'maven3'  // Ensure 'Maven3' matches the exact name of your Maven installation in Jenkins
    }

    environment {
        AWS_ACCOUNT_ID = credentials('aws-account-id')
        ECR_REPO_NAME = 'my-repo'
        AWS_REGION = credentials('aws-region')
        IMAGE_TAG = "${env.BUILD_ID}"
        CLUSTER_NAME = 'mycluster'
    }

    stages {
        stage('Prepare') {
            steps {
                script {
                    GIT_CLI_VERBOSE = 'true'
                    echo 'preparing'
                    
                }
            }
        }

        stage('Cleanup Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout') {
            steps {
                // Checkout code from your repository
                git branch: 'master', url: 'https://github.com/Harish667-hash/BoardgameListingWebApp.git'
            }
        }
        
        
        stage('Build') {
            steps {
                sh 'mvn clean package'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    dockerImage = docker.build("${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO_NAME}:${IMAGE_TAG}")
                }
            }
        }

         stage('Login to AWS ECR') {
            steps {
                script {
                    sh '''
                    aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com

                    '''
                }

            }
        }

        stage('Push Docker Image to ECR') {
            steps {
                script {
                    docker.withRegistry("https://${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com") {
                        dockerImage.push("${IMAGE_TAG}")
                    }
                }
            }
        }

         stage('List Files') {
            steps {
                sh 'ls -l'
            }
        }

         stage('Deploy to EKS') {
            steps {
                withAWS(region: "${AWS_REGION}", credentials: 'aws-credentials-id') {
                    sh 'aws eks update-kubeconfig --name ${CLUSTER_NAME}'
                }
                script {
                    sh 'kubectl apply -f deployment.yml'
                }
            }
        }

         stage('Verify Deployment') {
            steps {
                script {
                    sh 'kubectl rollout status deployment/${DEPLOYMENT_NAME}'
                    sh 'kubectl get pods'
                }
            }
        }
       
        stage('Cleanup') {
            steps {
                sh 'docker rmi ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO_NAME}:${IMAGE_TAG}'
            }
        }
        
    }

    post {
        always {
            cleanWs()
        }
    }
}