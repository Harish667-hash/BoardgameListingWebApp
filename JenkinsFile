pipeline {
    agent any

    tools {
        jdk 'java17'
        maven 'maven3'  // Ensure 'Maven3' matches the exact name of your Maven installation in Jenkins
    }

    environment {
        GIT_CLI_VERBOSE = 'true'
        IMAGE_TAG = "${env.BUILD_ID}"
    }

    stages {
        /*
        stage('Prepare') {
            steps {
                script {
                    // Retrieve credentials and secrets
                    env.AWS_ACCOUNT_ID = credentials('aws-account-id')
                    env.ECR_REPO_NAME = credentials('ecr-repo-name')
                    env.AWS_REGION = credentials('aws-region')
                }
            }
        }

          stage('Login to AWS ECR') {
            steps {
                withAWS(credentials: 'aws-ecr-creds', region: "${AWS_REGION}") {
                    script {
                        sh 'aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com'
                    }
                }
            }
        }

        stage("Cleanup Workspace") {
            steps {
                cleanWs()
            }
        }

        stage('Checkout') {
            steps {
                // Checkout code from your repository
                 git branch: 'master', url: 'https://github.com/Harish667-hash/BoardgameListingWebApp.git'
            }
        }

        stage("Build") {
            steps {
                sh 'mvn clean package'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    dockerImage = docker.build("${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO_NAME}:${IMAGE_TAG}")
                }
            }
        }

        stage('Push Docker Image to ECR') {
            steps {
                script {
                    docker.withRegistry("https://${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com") {
                        dockerImage.push("${IMAGE_TAG}")
                    }
                }
            }
        }
       
       stage('Cleanup') {
            steps {
                sh 'docker rmi ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO_NAME}:${IMAGE_TAG}'
            }
        } */



    }

    post {
        always {
            cleanWs()
        }
    }
}